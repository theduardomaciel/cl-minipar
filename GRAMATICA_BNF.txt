
# Gramática BNF da Linguagem MiniPar OOP - Tema 2
# Compiladores 2025.1 - Atividade 2

## PROGRAMA
<programa> ::= { <declaracao> }

<declaracao> ::= <declaracao_classe>
               | <declaracao_funcao>
               | <declaracao_variavel>
               | <comando>

## ORIENTAÇÃO A OBJETOS

<declaracao_classe> ::= "class" <identificador> [ "extends" <identificador> ]
                        "{" { <membro_classe> } "}"

<membro_classe> ::= <declaracao_variavel>
                  | <declaracao_metodo>

<declaracao_metodo> ::= <tipo_retorno> <identificador> "(" <parametros> ")"
                        "{" { <comando> } "}"

<instanciacao> ::= "new" <identificador> "(" [ <argumentos> ] ")"

<chamada_metodo> ::= <expressao> "." <identificador> "(" [ <argumentos> ] ")"

## FUNÇÕES

<declaracao_funcao> ::= "func" <identificador> "(" <parametros> ")"
                        "->" <tipo> "{" { <comando> } "}"

<parametros> ::= [ <parametro> { "," <parametro> } ]

<parametro> ::= <identificador> ":" <tipo>

<argumentos> ::= <expressao> { "," <expressao> }

## VARIÁVEIS

<declaracao_variavel> ::= <tipo> <identificador> [ "=" <expressao> ]

<atribuicao> ::= <identificador> "=" <expressao>

## COMANDOS

<comando> ::= <declaracao_variavel>
           | <atribuicao>
           | <comando_if>
           | <comando_while>
           | <comando_do_while>
           | <comando_for>
           | <comando_return>
           | <comando_break>
           | <comando_continue>
           | <bloco_seq>
           | <bloco_par>
           | <comando_print>
           | <comando_input>
           | <chamada_metodo>
           | <expressao>

<comando_if> ::= "if" "(" <expressao> ")" "{" { <comando> } "}"
                 [ "else" "{" { <comando> } "}" ]

<comando_while> ::= "while" "(" <expressao> ")" "{" { <comando> } "}"

<comando_for> ::= "for" "(" <tipo> <identificador> "in" <expressao> ")"
                  "{" { <comando> } "}"

<comando_do_while> ::= "do" "{" { <comando> } "}" "while" "(" <expressao> ")" ";"

<comando_print> ::= "print" "(" [ <argumentos> ] ")" ";"

<comando_input> ::= "input" "(" [ <expressao> ] ")"

<comando_return> ::= "return" [ <expressao> ]

<comando_break> ::= "break"

<comando_continue> ::= "continue"

<bloco_seq> ::= "seq" "{" { <comando> } "}"

<bloco_par> ::= "par" "{" { <comando> } "}"

## CANAIS E MENSAGENS

<declaracao_canal> ::= "c_channel" "(" <identificador> { "," <identificador> } ")" ";"
                     | "c_channel" <identificador> <identificador> <identificador> ";"

<comando_send> ::= <identificador> "." "send" "(" [ <argumentos> ] ")"

<comando_receive> ::= <identificador> "." "receive" "(" [ <argumentos> ] ")"

## EXPRESSÕES

<expressao> ::= <atribuicao>
              | <expr_logica_ou>

<expr_logica_ou> ::= <expr_logica_e> { "||" <expr_logica_e> }

<expr_logica_e> ::= <expr_igualdade> { "&&" <expr_igualdade> }

<expr_igualdade> ::= <expr_relacional> { ( "==" | "!=" ) <expr_relacional> }

<expr_relacional> ::= <expr_aditiva> { ( ">" | ">=" | "<" | "<=" ) <expr_aditiva> }

<expr_aditiva> ::= <expr_multiplicativa> { ( "+" | "-" ) <expr_multiplicativa> }

<expr_multiplicativa> ::= <expr_unaria> { ( "*" | "/" | "%" ) <expr_unaria> }

<expr_unaria> ::= ( "!" | "-" ) <expr_unaria>
                | <expr_chamada>

<expr_chamada> ::= <expr_primaria>
                  { "(" [ <argumentos> ] ")" | "." <identificador> | "[" <expressao> "]" }

<expr_primaria> ::= <numero>
                  | <string>
                  | "true"
                  | "false"
                  | <identificador>
                  | <instanciacao>
                  | <literal_lista>
                  | <literal_dict>
                  | "(" <expressao> ")"

<literal_lista> ::= "[" [ <expressao> { "," <expressao> } ] "]"

<literal_dict> ::= "{" [ <expressao> ":" <expressao> { "," <expressao> ":" <expressao> } ] "}"

## TIPOS

<tipo> ::= "number"
         | "string"
         | "bool"
         | "void"
         | "list"
         | "dict"
         | <identificador>  # tipo customizado (classe)

<tipo_retorno> ::= <tipo>

## LÉXICO

<identificador> ::= <letra> { <letra> | <digito> | "_" }

<numero> ::= <digito> { <digito> } [ "." <digito> { <digito> } ]

<string> ::= '"' { <caractere> } '"'

<letra> ::= "A" | "B" | ... | "Z" | "a" | "b" | ... | "z"

<digito> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

<caractere> ::= qualquer caractere ASCII exceto '"'

## COMENTÁRIOS

<comentario_linha> ::= "#" { <qualquer_caractere> } <nova_linha>

<comentario_bloco> ::= "/*" { <qualquer_caractere> } "*/"

## PALAVRAS-RESERVADAS

class, extends, new, this, super,
func, var, if, else, while, do, for, return, break, continue,
seq, par, c_channel, s_channel, in, print, input,
number, string, bool, void, list, dict,
true, false

## OPERADORES

Aritméticos: +, -, *, /, %
Relacionais: ==, !=, <, <=, >, >=
Lógicos: &&, ||, !
Atribuição: =
Acesso: .
Outros: ->, :, ,, ;, (, ), {, }, [, ]