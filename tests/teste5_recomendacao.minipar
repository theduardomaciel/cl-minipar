# Programa de Teste 5: Sistema de Recomendação E-commerce
# Sistema de recomendação baseado em histórico de compras usando Redes Neurais


# --- Classes ---
class Produto {
    string nome;
    Produto(string n) {
        this.nome = n;
    }
}

class Categoria {
    string nome;
    list produtos;
    Categoria(string n, list prods) {
        this.nome = n;
        this.produtos = prods;
    }
}

class Usuario {
    list historico_compras;
    Usuario(list historico) {
        this.historico_compras = historico;
    }
    list codificar_historico(list todos_produtos) {
        list codificacao = [];
        number i = 0;
        while (i < todos_produtos.length) {
            if (this.comprou(todos_produtos[i])) {
                codificacao[i] = 1;
            } else {
                codificacao[i] = 0;
            }
            i = i + 1;
        }
        return codificacao;
    }
    bool comprou(string produto) {
        number j = 0;
        while (j < this.historico_compras.length) {
            if (this.historico_compras[j] == produto) {
                return true;
            }
            j = j + 1;
        }
        return false;
    }
}

class RedeNeural {
    number input_size;
    number hidden_size;
    number output_size;
    list W1;
    list b1;
    list W2;
    list b2;
    RedeNeural(number input_s, number hidden_s, number output_s) {
        this.input_size = input_s;
        this.hidden_size = hidden_s;
        this.output_size = output_s;
        # Inicializa pesos e bias com 0.5
        this.W1 = [];
        this.b1 = [];
        this.W2 = [];
        this.b2 = [];
        number i = 0;
        while (i < input_s) {
            this.W1[i] = [];
            number j = 0;
            while (j < hidden_s) {
                this.W1[i][j] = 0.5;
                j = j + 1;
            }
            i = i + 1;
        }
        i = 0;
        while (i < hidden_s) {
            this.b1[i] = 0.5;
            i = i + 1;
        }
        i = 0;
        while (i < hidden_s) {
            this.W2[i] = [];
            number j = 0;
            while (j < output_s) {
                this.W2[i][j] = 0.5;
                j = j + 1;
            }
            i = i + 1;
        }
        i = 0;
        while (i < output_s) {
            this.b2[i] = 0.5;
            i = i + 1;
        }
    }
    list relu(list x) {
        list r = [];
        number i = 0;
        while (i < x.length) {
            r[i] = max(0, x[i]);
            i = i + 1;
        }
        return r;
    }
    list sigmoid(list x) {
        list s = [];
        number i = 0;
        while (i < x.length) {
            # sigmoid(x) = 1/(1+exp(-x)) usando built-in exp
            s[i] = 1 / (1 + exp(-x[i]));
            i = i + 1;
        }
        return s;
    }
    list forward(list X) {
        # Z1 = W1*X + b1
        list Z1 = [];
        number i = 0;
        while (i < this.b1.length) {
            number soma = 0;
            number j = 0;
            while (j < X.length) {
                soma = soma + X[j] * this.W1[j][i];
                j = j + 1;
            }
            Z1[i] = soma + this.b1[i];
            i = i + 1;
        }
        list A1 = this.relu(Z1);
        # Z2 = W2*A1 + b2
        list Z2 = [];
        i = 0;
        while (i < this.b2.length) {
            number soma2 = 0;
            number j = 0;
            while (j < A1.length) {
                soma2 = soma2 + A1[j] * this.W2[j][i];
                j = j + 1;
            }
            Z2[i] = soma2 + this.b2[i];
            i = i + 1;
        }
        list A2 = this.sigmoid(Z2);
        return A2;
    }
}

class Recomendador {
    Usuario usuario;
    list categorias;
    list todos_produtos;
    Recomendador(Usuario u, list cats) {
        this.usuario = u;
        this.categorias = cats;
        this.todos_produtos = this.obterTodosProdutos();
    }
    list obterTodosProdutos() {
        list todos = [];
        number idx = 0;
        number i = 0;
        while (i < this.categorias.length) {
            Categoria cat = this.categorias[i];
            number j = 0;
            while (j < cat.produtos.length) {
                Produto p = cat.produtos[j];
                todos[idx] = p.nome;
                idx = idx + 1;
                j = j + 1;
            }
            i = i + 1;
        }
        return todos;
    }
    list recomendar() {
        list entrada_codificada = this.usuario.codificar_historico(this.todos_produtos);
        number input_size = entrada_codificada.length;
        number hidden_size = 10;
        number output_size = entrada_codificada.length;
        RedeNeural rede = new RedeNeural(input_size, hidden_size, output_size);
        list saida = rede.forward(entrada_codificada);
        list recomendacoes = [];
        number i = 0;
        number idx = 0;
        while (i < saida.length) {
            if (saida[i] > 0.5 && !this.usuario.comprou(this.todos_produtos[i])) {
                recomendacoes[idx] = this.todos_produtos[i];
                idx = idx + 1;
            }
            i = i + 1;
        }
        return recomendacoes;
    }
}

# --- Execução ---
seq {
    # Categorias e produtos
    list categorias = [];
    categorias[0] = new Categoria("Eletrônicos", [new Produto("Smartphone"), new Produto("Laptop"), new Produto("Tablet"), new Produto("Fones de ouvido")]);
    categorias[1] = new Categoria("Roupas", [new Produto("Camisa"), new Produto("Jeans"), new Produto("Jaqueta"), new Produto("Sapatos")]);
    categorias[2] = new Categoria("Eletrodomésticos", [new Produto("Geladeira"), new Produto("Micro-ondas"), new Produto("Máquina de lavar"), new Produto("Ar condicionado")]);
    categorias[3] = new Categoria("Livros", [new Produto("Ficção"), new Produto("Não-ficção"), new Produto("Ficção científica"), new Produto("Fantasia")]);

    # Usuário
    list historico = ["Smartphone", "Jeans", "Micro-ondas", "Ficção"];
    Usuario usuario = new Usuario(historico);

    # Recomendador
    Recomendador recomendador = new Recomendador(usuario, categorias);
    list recomendacoes = recomendador.recomendar();

    # Exibir recomendações
    println("Produtos recomendados para você:");
    number i = 0;
    while (i < recomendacoes.length) {
        println(recomendacoes[i]);
        i = i + 1;
    }
}
