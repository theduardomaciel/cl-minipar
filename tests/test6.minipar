# Implementação do Quicksort em MiniPar OOP

class Quicksort {
    var array: list

    func init(array: list) -> void {
        self.array = array
    }

    func ordenar() -> list {
        return self._quicksort(self.array)
    }

    func _quicksort(array: list) -> list {
        if (array.length <= 1) {
            return array
        } else {
            var pivot: number = array[0]
            var menores: list = []
            var maiores: list = []
            for (var i: number = 1 in array.length) {
                if (array[i] <= pivot) {
                    menores.append(array[i])
                } else {
                    maiores.append(array[i])
                }
            }
            return self._quicksort(menores) + [pivot] + self._quicksort(maiores)
        }
    }
}

class InterfaceOrdenacao {
    func iniciar() -> void {
        print("==== Ordenação com Quicksort ====")
        print("Insira os elementos do vetor separados por espaço:")
        var entrada: string = sys.stdin.readline()
        var array: list = []
        try {
            var partes: list = entrada.split(" ")
            for (var i: number = 0 in partes.length) {
                array.append(int(partes[i]))
            }
            print("Vetor original: " + array)
            var algoritmo: Quicksort = new Quicksort(array)
            var vetor_ordenado: list = algoritmo.ordenar()
            print("Vetor ordenado: " + vetor_ordenado)
        } catch {
            print("Por favor, insira apenas números separados por espaço.")
            self.iniciar()
        }
    }
}

seq {
    var interface: InterfaceOrdenacao = new InterfaceOrdenacao()
    interface.iniciar()
}