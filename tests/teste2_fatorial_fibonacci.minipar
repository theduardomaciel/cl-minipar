# Programa de Teste 2: Execução Paralela
# Thread 1: Cálculo do Fatorial
# Thread 2: Cálculo da Série de Fibonacci

class Fatorial {
    number numero;
    
    # Construtor
    Fatorial(number n) {
        this.numero = n;
    }
    
    number calcular() {
        number resultado = 1;
        number i = 1;
        
        while (i <= this.numero) {
            resultado = resultado * i;
            i = i + 1;
        }
        
        return resultado;
    }
    
    void executar() {
        println("=== Cálculo do Fatorial ===");
        # number n = input("Digite um número para calcular o fatorial: ");
        # this.numero = n;
        number resultado = this.calcular();
        print("Fatorial de ");
        print(this.numero);
        print(" = ");
        print(resultado);
        println(" ");
    }
}

class Fibonacci {
    number limite;
    
    # Construtor
    Fibonacci(number lim) {
        this.limite = lim;
    }
    
    void executar() {
        println("=== Série de Fibonacci ===");
        # number n = input("Digite quantos números da série deseja: ");
        # this.limite = n;
        
        number a = 0;
        number b = 1;
        number i = 0;
        
        println("Série de Fibonacci: ");
        
        while (i <= this.limite) {
            print(a);
            print(" ");
            
            number temp = a + b;
            a = b;
            b = temp;
            i = i + 1;
        }
    }
}

# Programa principal - Execução Paralela
par {
    # Thread 1: Cálculo do Fatorial
    Fatorial fatorial = new Fatorial(5);
    fatorial.executar();
    
    # Thread 2: Cálculo da Série de Fibonacci
    Fibonacci fibonacci = new Fibonacci(10);
    fibonacci.executar();
}