# Programa de Teste 5: Sistema de Recomendação E-commerce
# Sistema de recomendação baseado em histórico de compras usando Redes Neurais

class Produto {
    string nome;
    
    # Construtor
    Produto(string n) {
        this.nome = n;
    }
    
    string getNome() {
        return this.nome;
    }
}

class Categoria {
    string nome;
    list produtos;
    
    # Construtor
    Categoria(string n, list prods) {
        this.nome = n;
        this.produtos = prods;
    }
}

class Usuario {
    list historico_compras;
    
    # Construtor
    Usuario(list historico) {
        this.historico_compras = historico;
    }
    
    list codificarHistorico(list todos_produtos) {
        list codificacao = [];
        number i = 0;
        
        while (i < todos_produtos.length) {
            # Verifica se produto está no histórico
            bool encontrado = false;
            number j = 0;
            
            while (j < this.historico_compras.length) {
                if (todos_produtos[i] == this.historico_compras[j]) {
                    encontrado = true;
                }
                j = j + 1;
            }
            
            if (encontrado) {
                codificacao[i] = 1;
            } else {
                codificacao[i] = 0;
            }
            
            i = i + 1;
        }
        
        return codificacao;
    }
}

class RedeNeuralRecomendacao {
    number input_size;
    number hidden_size;
    number output_size;
    list pesos_input_hidden;
    list pesos_hidden_output;
    
    # Construtor
    RedeNeuralRecomendacao(number input_s, number hidden_s, number output_s) {
        this.input_size = input_s;
        this.hidden_size = hidden_s;
        this.output_size = output_s;
        
        # Inicializar pesos (simplificado)
        this.pesos_input_hidden = [];
        this.pesos_hidden_output = [];
    }
    
    number relu(number x) {
        if (x > 0) {
            return x;
        } else {
            return 0;
        }
    }
    
    number sigmoid(number x) {
        # Aproximação simples
        if (x > 0) {
            return 0.8;
        } else {
            return 0.2;
        }
    }
    
    list propagacao(list entrada) {
        # Camada oculta (simplificado)
        list camada_oculta = [];
        number i = 0;
        
        while (i < this.hidden_size) {
            camada_oculta[i] = this.relu(0.5);
            i = i + 1;
        }
        
        # Camada de saída
        list saida = [];
        i = 0;
        
        while (i < this.output_size) {
            saida[i] = this.sigmoid(0.6);
            i = i + 1;
        }
        
        return saida;
    }
}

class Recomendador {
    Usuario usuario;
    list categorias;
    RedeNeuralRecomendacao rede;
    
    # Construtor
    Recomendador(Usuario u, list cats) {
        this.usuario = u;
        this.categorias = cats;
        
        # Criar rede neural
        number num_produtos = this.contarProdutos();
        this.rede = new RedeNeuralRecomendacao(num_produtos, 10, num_produtos);
    }
    
    number contarProdutos() {
        # Contar total de produtos em todas categorias
        return 12;
    }
    
    list recomendar() {
        print("=== Sistema de Recomendação ===");
        
        list todos_produtos = this.obterTodosProdutos();
        list historico_codificado = this.usuario.codificarHistorico(todos_produtos);
        
        # Obter recomendações via rede neural
        list probabilidades = this.rede.propagacao(historico_codificado);
        
        # Filtrar produtos recomendados (probabilidade > 0.5)
        list recomendacoes = [];
        number i = 0;
        number count = 0;
        
        while (i < probabilidades.length) {
            if (probabilidades[i] > 0.5) {
                recomendacoes[count] = todos_produtos[i];
                count = count + 1;
            }
            i = i + 1;
        }
        
        return recomendacoes;
    }
    
    list obterTodosProdutos() {
        # Retorna lista com todos os produtos de todas as categorias
        list todos = [];
        # Simplificado: retorna produtos fixos
        todos[0] = "Smartphone";
        todos[1] = "Laptop";
        todos[2] = "Tablet";
        todos[3] = "Fones de ouvido";
        todos[4] = "Camisa";
        todos[5] = "Jeans";
        todos[6] = "Jaqueta";
        todos[7] = "Sapatos";
        todos[8] = "Geladeira";
        todos[9] = "Micro-ondas";
        todos[10] = "Máquina de lavar";
        todos[11] = "Ar condicionado";
        
        return todos;
    }
}

# Programa principal
seq {
    # Criar histórico do usuário
    list historico = ["Smartphone", "Jeans", "Micro-ondas", "Ficção"];
    Usuario usuario = new Usuario(historico);
    
    # Criar categorias (simplificado)
    list categorias = [];
    
    # Criar recomendador
    Recomendador recomendador = new Recomendador(usuario, categorias);
    list recomendacoes = recomendador.recomendar();
    
    # Exibir recomendações
    print("Produtos recomendados para você:");
    number i = 0;
    while (i < recomendacoes.length) {
        print(recomendacoes[i]);
        i = i + 1;
    }
}
